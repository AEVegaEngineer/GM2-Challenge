// src/__tests__/helpers.test.ts or src/helpers.test.ts

import {
  addEmojiPrefix,
  getEmojiPrefix,
  combineEmojiPrefixWithName,
} from "../src/helpers";

describe("Helper Functions", () => {
  describe("addEmojiPrefix", () => {
    it("should add red emoji for even IDs", () => {
      expect(addEmojiPrefix("Test Item", 2)).toBe("ðŸ”´ Test Item");
      expect(addEmojiPrefix("Another Item", 4)).toBe("ðŸ”´ Another Item");
    });

    it("should add blue emoji for odd IDs", () => {
      expect(addEmojiPrefix("Test Item", 1)).toBe("ðŸ”µ Test Item");
      expect(addEmojiPrefix("Another Item", 3)).toBe("ðŸ”µ Another Item");
    });
  });

  describe("getEmojiPrefix", () => {
    it("should extract red emoji prefix", () => {
      expect(getEmojiPrefix("ðŸ”´ Test Item")).toBe("ðŸ”´ ");
    });

    it("should extract blue emoji prefix", () => {
      expect(getEmojiPrefix("ðŸ”µ Another Item")).toBe("ðŸ”µ ");
    });

    it("should return empty string for no emoji prefix", () => {
      expect(getEmojiPrefix("No Emoji Item")).toBe("");
    });
  });

  describe("combineEmojiPrefixWithName", () => {
    it("should preserve red emoji prefix", () => {
      expect(combineEmojiPrefixWithName("ðŸ”´ Old Name", "New Name")).toBe(
        "ðŸ”´ New Name"
      );
    });

    it("should preserve blue emoji prefix", () => {
      expect(combineEmojiPrefixWithName("ðŸ”µ Old Name", "New Name")).toBe(
        "ðŸ”µ New Name"
      );
    });

    it("should not add emoji if original name had none", () => {
      expect(combineEmojiPrefixWithName("Old Name", "New Name")).toBe(
        "New Name"
      );
    });
  });
});
